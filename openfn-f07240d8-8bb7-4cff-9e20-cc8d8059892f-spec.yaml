name: gife-salesforce-to-mailchimp
description: null
credentials:
  eassis@verasolutions.org-GIFE-Production-Salesforce---Emilie:
    name: GIFE Production Salesforce - Emilie
    owner: eassis@verasolutions.org
  efantozzi@verasolutions.org-GIFE---MailChimp:
    name: GIFE - MailChimp
    owner: efantozzi@verasolutions.org
  efantozzi@verasolutions.org-GIFE---MailChimp-Teste:
    name: GIFE - MailChimp Teste
    owner: efantozzi@verasolutions.org
  efantozzi@verasolutions.org-GIFE---Salesforce-Production---Evan:
    name: GIFE - Salesforce Production - Evan
    owner: efantozzi@verasolutions.org
  mribeirocruz@verasolutions.org-GIFE---MailChimp---Mari:
    name: GIFE - MailChimp - Mari
    owner: mribeirocruz@verasolutions.org
  mribeirocruz@verasolutions.org-GIFE-Production-Salesforce---Mari:
    name: GIFE Production Salesforce - Mari
    owner: mribeirocruz@verasolutions.org
  mribeirocruz@verasolutions.org-Mailchimp-Test-Environment---Mari:
    name: Mailchimp Test Environment - Mari
    owner: mribeirocruz@verasolutions.org
  mribeirocruz@verasolutions.org-Sandbox---OpenFn-Mailchimp-integration-2:
    name: Sandbox - OpenFn Mailchimp integration 2
    owner: mribeirocruz@verasolutions.org
  sverma@verasolutions.org-Sandbox-Mailchimp-Shreya:
    name: Sandbox Mailchimp Shreya
    owner: sverma@verasolutions.org
  wavila@verasolutions.org-Mailchimp---Will---Test-enviroment-3:
    name: Mailchimp - Will - Test enviroment 3
    owner: wavila@verasolutions.org
  wavila@verasolutions.org-Mailchimp-HTTP---test-credential:
    name: Mailchimp HTTP - test credential
    owner: wavila@verasolutions.org
workflows:
  "Remove-Deleted-Campaign-Members/Tags":
    name: 'Remove Deleted Campaign Members/Tags'
    jobs:
      Get-deleted-campaign-members:
        name: Get deleted campaign members
        adaptor: '@openfn/language-salesforce@4.8.6'
        credential: mribeirocruz@verasolutions.org-Sandbox---OpenFn-Mailchimp-integration-2
        body: 
          path: workflows/remove-members/fetch-deleted.js
      Remove-deleted-members-tags:
        name: Remove deleted members tags
        adaptor: '@openfn/language-mailchimp@1.0.11'
        credential: mribeirocruz@verasolutions.org-Mailchimp-Test-Environment---Mari
        body: 
          path: workflows/remove-members/remove-deleted.js

    triggers:
      cron:
        type: cron
        cron_expression: '*/5 * * * *'
        enabled: false
    edges:
      cron->Get-deleted-campaign-members:
        source_trigger: cron
        target_job: Get-deleted-campaign-members
        condition_type: always
        enabled: true
      Get-deleted-campaign-members->Remove-deleted-members-tags:
        source_job: Get-deleted-campaign-members
        target_job: Remove-deleted-members-tags
        condition_type: js_expression
        condition_label: has-members
        condition_expression: |
          state.members.length > 0 && !state.errors
        enabled: false
  Upsert-Members:
    name: Upsert Members
    jobs:
      Get-members-for-upsert:
        name: Get members for upsert
        adaptor: '@openfn/language-salesforce@4.8.6'
        credential: mribeirocruz@verasolutions.org-GIFE-Production-Salesforce---Mari
        body: |
          // Setup lastSyncTime
          fn(state => {
            const manualCursor = '2024-08-10T15:30:00.000Z';
            console.log(manualCursor, 'manualCursor');

            const lastSyncTime = state.lastRunTime || manualCursor;
            const lastRunTime = new Date().toISOString();
            console.log('time at job start:' + lastRunTime);

            return { ...state, lastSyncTime, lastRunTime };
          });

          bulkQuery(
            state => `
          SELECT Id, Name, FirstName, LastName, Email, CreatedDate,
               Contact.AccountId, Contact.LastModifiedDate, Contact.CreatedDate,
               Campaign.Name, Campaign.Nome_da_Tag__c
          FROM CampaignMember
          WHERE Campaign.RecordType.Name = 'Grupos, RTs ou Áreas Temáticas'
              AND Campaign.IsActive = true
              AND (Contact.LastModifiedDate > ${state.lastSyncTime} OR CreatedDate > ${state.lastSyncTime})
          `
          );

          //Seperate members for each batch
          fn(state => {
            const campaignMembers = state.data;
            const membersToCreate = [];
            const membersToUpdate = [];

            console.log(campaignMembers.length, 'campaignMembers');

            for (const member of campaignMembers) {
              const mappedMember = {
                email_address: member.Email,
                full_name: member.Name,
                merge_fields: {
                  FNAME: member.FirstName,
                  LNAME: member.LastName,
                  MMERGE4: member["Contact.AccountId"],
                },
                tags: [member["Campaign.Nome_da_tag__c"]],
              };
              if ((member["Contact.LastModifiedDate"] > state.lastSyncTime) || (member.CreatedDate > state.lastSyncTime)) {
                membersToCreate.push({ ...mappedMember, status: 'subscribed' });
              } else {
                membersToUpdate.push(mappedMember);
           }
            }

            console.log(membersToCreate.length, 'membersToCreate before merge tags');
            console.log(membersToUpdate.length, 'membersToUpdate before merge tags');

            let mergeCreateMemberTags = [];
            let mergeUpdateMemberTags = [];

            if (membersToCreate.length > 0) {
              mergeCreateMemberTags = membersToCreate.reduce((result, item) => {
                const existingItem = result.find(
                  existing => existing.email_address === item.email_address
                );

                if (existingItem) {
                  existingItem.tags = [...new Set([...existingItem.tags, ...item.tags])];
                } else {
                  result.push(item);
                }

                return result;
              }, []);
            }

            if (membersToUpdate.length > 0) {
              mergeUpdateMemberTags = membersToUpdate.reduce((result, item) => {
                const existingItem = result.find(
                  existing => existing.email_address === item.email_address
                );

                if (existingItem) {
                  existingItem.tags = [...new Set([...existingItem.tags, ...item.tags])];
                } else {
                  result.push(item);
                }
                return result;
              }, []);
            }

            console.log(
              mergeCreateMemberTags.length,
              'mergeCreateMemberTags after merge tags'
            );

            console.log(
              mergeUpdateMemberTags.length,
              'mergeUpdateMemberTags after merge tags'
            );

            return {
              ...state,
              references: [],
              members: [
                ...chunk(mergeCreateMemberTags, 500),
                ...chunk(mergeUpdateMemberTags, 500),
              ],
              chunkErrors: [],
            };
          });

      Add-or-update-member-tags:
        name: Add or update member tags
        adaptor: '@openfn/language-mailchimp@1.0.11'
        credential: mribeirocruz@verasolutions.org-GIFE---MailChimp---Mari
        body: |
          // Add or Update members to Mailchimp
          each(
            '$.members[*]',
            post(
            '/lists/43fead6cd7',
             
              state => {
                console.log(`Upserting ${state.data.length} members...`);
                return {
                  sync_tags: false,
                  update_existing: true,
                  email_type: 'html',
                  members: state.data,
                };
              },
              {},
              state => {

                if (state.response.total_created > 0)
                  console.log(`Added ${state.response.total_created} members`);
                if (state.response.total_updated > 0)
                  console.log(`Updated ${state.response.total_updated} members`);

                if (state.response.error_count > 0)
                  state.chunkErrors.push(state.response.errors);
                return state;
              }
            )
          );

          // Alert admin if response has errors
          fn(state => {
            // Check if chunks response has errors
            const chunkErrors = state.chunkErrors.flat();
            if (chunkErrors.length > 0) {
              throw new Error(JSON.stringify(chunkErrors, null, 2));
            }
            return state;
          });

    triggers:
      cron:
        type: cron
        cron_expression: '*/150 * * * *'
        enabled: true
    edges:
      cron->Get-members-for-upsert:
        source_trigger: cron
        target_job: Get-members-for-upsert
        condition_type: always
        enabled: true
      Get-members-for-upsert->Add-or-update-member-tags:
        source_job: Get-members-for-upsert
        target_job: Add-or-update-member-tags
        condition_type: on_job_success
        enabled: true
